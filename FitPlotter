import pylab
import numpy as np
import matplotlib.pyplot as plt

FIGROW = 1
FIGCOL = 2
error = 0.5
## dt = data type key: 0 - none, 1 - train, 2 - Test, 

def errorPlot(Y,Yp,dt = 0,n=1,s="Y calculated vs Y actual",
              xl='Actual Values',yl="Calclulated Values",legend = True):
    truemin = min(min(Y),min(Yp))
    truemax = max(max(Y),max(Yp))
    if truemin < 0: T = np.linspace(1.1*truemin,1.1*truemax)
    else:           T = np.linspace(truemin-1.1*truemin,1.1*truemax)
    
    plt.subplot(FIGROW,FIGCOL,n)
    plt.grid()

    if dt== 1:      plt.plot(Y,Yp,'og',label = "Train Data")
    elif dt == 2:   plt.plot(Y,Yp,'or',label = "Test Data")
    else:           plt.plot(Y,Yp,'o')

    plt.plot(T,T,'-',color='b', label = "± 0 units")
    plt.plot(T,T+error,'--b', label = "± "+str(error)+" unit")
    plt.plot(T,T-error,'--b')
    setAxes(Y,Yp,s,xl,yl,legend)
    pylab.xlim(xmin= truemin-0.1*abs(truemin), xmax = 1.1 * truemax)
    pylab.ylim(ymin= truemin-0.1*abs(truemin), ymax = 1.1 * truemax)
    return
    
def LON(x,ave,al,cu,ni,pd,pt):
    M = []
    m = []
    for n in range(len(x)):
        M.append(max(ave[n],al[n],cu[n],ni[n],pd[n],pt[n]))
        m.append(min(ave[n],al[n],cu[n],ni[n],pd[n],pt[n]))
    plt.plot(x,ave,'gold',label="Average")
    plt.plot(x,al,'r',label = "Al")
    plt.plot(x,cu,'b',label = "Cu")
    plt.plot(x,ni,'g',label = "Ni")
    plt.plot(x,pd,'orange',label = "Pd")
    plt.plot(x,pt,'purple',label = "Pt")
    plt.grid()
    setAxes(x,list([max(M),min(m)]),"Average RMS vs Impurities Trained On",
            "Number Of Impurities Trained on","RMS")

def setAxes(x,y,s1="Title",s2="X data",s3= "Ydata",legend = True):
    plt.title(s1)
    ax = plt.gca()
    if min(y) < 0: #set x-axis
        ax.spines['top'].set_color('none')
        ax.spines['bottom'].set_position(('data',0))
        plt.text(0.5, -0.025, s2, ha='center', va='center',
                 transform=ax.transAxes)
    else:
        plt.text(0.5, -0.1, s2, ha='center', va='center',
                 transform=ax.transAxes)

    if min(x) < 0: #set y-axis
        ax.spines['right'].set_color('none')
        ax.spines['left'].set_position(('data',0))
        plt.text(-0.05, 0.5, s3, ha='center', va='center',
                 rotation = 'vertical', transform=ax.transAxes)
    else:
        plt.text(-0.12, 0.5, s3, ha='center', va='center',
                 rotation = 'vertical', transform=ax.transAxes)
    if legend: plt.legend(loc=0)
    return

def SetRowColumn(r,c):
    global FIGROW
    global FIGCOL
    FIGROW = r
    FIGCOL = c
    return

def simplemultiDPlot(Y,Yt,Ytp,YT,YTP,r=2,c=2,i=1,j=2,k=3):
    SetRowColumn(r,c)
    errorPlot(Yt, Ytp, dt = 1,  n=i, s = "calculated vs Y actual(Training)",
              xl='Actual Values',yl="Calclulated Values")
    errorPlot(YT, YTP, dt = 2, n=j, s="Y calculated vs Y actual(Testing)",
              xl='Actual Values',yl="Calclulated Values")
    errorPlotCombined(Yt,Ytp,YT,YTP,n=k,s="Y calculated vs Y actual(Combined)",
              xl='Actual Values',yl="Calclulated Values")
